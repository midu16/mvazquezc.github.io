<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>openshift on Linuxera</title>
    <link>https://linuxera.org/tags/openshift/</link>
    <description>Recent content in openshift on Linuxera</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://linuxera.org/tags/openshift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPU and Memory Management on Kubernetes with Cgroupsv2</title>
      <link>https://linuxera.org/cpu-memory-management-kubernetes-cgroupsv2/</link>
      <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/cpu-memory-management-kubernetes-cgroupsv2/</guid>
      <description>CPU and Memory Management on Kubernetes with Cgroupsv2 In this post I&amp;rsquo;ll try to explain how CPU and Memory management works under the hood on Kubernetes. If you ever wondered what happens when you set requests and limits for your pods, keep reading!
Attention
This is the result of my exploratory work around cgroupsv2 and their application to Kubernetes. Even though I tried really hard to make sure the information in this post is accurate, I&amp;rsquo;m far from being an expert on the topic and some information may not be 100% accurate.</description>
    </item>
    
    <item>
      <title>Exposing multiple Kubernetes clusters with a single load balancer and a single public IP</title>
      <link>https://linuxera.org/exposing-multiple-kubernetes-clusters-single-lb-and-ip/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/exposing-multiple-kubernetes-clusters-single-lb-and-ip/</guid>
      <description>Exposing multiple Kubernetes clusters with a single load balancer and a single public IP My colleague Alberto Losada and I have been working on a lab lately. The lab is composed of three OpenShift clusters on VMs, these VMs are deployed on an isolated libvirt network, which means that we cannot access them from outside the hypervisor.
In order to solve this issue, we wanted to expose the three clusters using the public IP available in the hypervisor.</description>
    </item>
    
    <item>
      <title>OpenShift 4 User Certificates</title>
      <link>https://linuxera.org/user-certificates-in-openshift4/</link>
      <pubDate>Fri, 13 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/user-certificates-in-openshift4/</guid>
      <description>User Certificates in OpenShift 4 Attention
The information described in this blog post may not be a supported configuration for OpenShift 4. Please, refer to the official docs for supported documentation.
In this blog we will see how we can create OpenShift Users using client certificates and how to configure the API Server, so we can create client certificates using custom CAs. The information described in this blog was last tested with OpenShift 4.</description>
    </item>
    
    <item>
      <title>Using OpenShift OAuth Proxy to secure your Applications on OpenShift</title>
      <link>https://linuxera.org/oauth-proxy-secure-applications-openshift/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/oauth-proxy-secure-applications-openshift/</guid>
      <description>What is OAuth Proxy A reverse proxy and static file server that provides authentication and authorization to an OpenShift OAuth server or Kubernetes master supporting the 1.6+ remote authorization endpoints to validate access to content. It is intended for use withing OpenShift clusters to make it easy to run both end-user and infrastructure services that do not provider their own authentication.
[Source]
Securing an Application with OAuth Proxy In this blog post we are going to deploy OAuth Proxy in front of a simple application.</description>
    </item>
    
    <item>
      <title>Writing Operators using the Operator Framework SDK</title>
      <link>https://linuxera.org/writing-operators-using-operator-framework/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linuxera.org/writing-operators-using-operator-framework/</guid>
      <description>Operators, operators everywhere As you may have noticed, Kubernetes operators are becoming more an more popular those days. In this post we are going to explain the basics around Operators and we will develop a simple Operator using the Operator Framework SDK.
What is an Operator An operator aims to automate actions usually performed manually while lessening the likelihood of error and simplifying complexity.
We can think of an operator as a method of packaging, deploying and managing a Kubernetes enabled application.</description>
    </item>
    
  </channel>
</rss>
